import type { Metadata } from "next";
import "./globals.css";
import Wrapper from "./wrapper";

interface AuthResult {
  accessToken: string;
  user: {
    uid: string;
    username: string;
  };
}

interface Payment {
  id: string;
  amount: number;
  currency: string;
  status: "pending" | "completed" | "failed";
  [key: string]: unknown; // optional extra fields if needed
}

interface PaymentData {
  amount: number;
  memo: string;
  metadata: Record<string, unknown>;
}

interface PaymentCallbacks {
  /** Called when the payment is ready for server approval */
  onReadyForServerApproval: (paymentId: string) => void;

  /** Called when the payment is ready for server completion */
  onReadyForServerCompletion: (paymentId: string, txid: string) => void;

  /** Called if the user cancels the payment */
  onCancel: (paymentId?: string) => void;

  /** Called if an error occurs during the payment process */
  onError: (error: Error) => void;
}

interface PiSDK {
  init: (options: { version: string; sandbox: boolean }) => void;
  authenticate: (
    scopes: string[],
    onIncompletePaymentFound?: (payment: Payment) => void
  ) => Promise<AuthResult>;
  createPayment: (
    paymentData: PaymentData,
    callbacks: PaymentCallbacks
  ) => void;
}

declare global {
  interface Window {
    Pi: PiSDK;
  }
}

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return <Wrapper>{children}</Wrapper>;
}
